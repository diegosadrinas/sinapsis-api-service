service: thumbnail-api-service
frameworkVersion: '3'
plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-iam-roles-per-function
useDotenv: true
provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - '*/*'
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
    BUCKET_NAME: thumbnail-api-service-bucket
    REGION: !Ref AWS::Region
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutBucketPolicy
        - s3:GetBucketPolicy
      Resource: !Ref S3Bucket

# -----------------------------------------------FUNCTIONS---------------------------------------------------
functions:
  lambda-test:
    handler: src/handlers/lambda-test/handler.main
    events:
      - http:
          method: post
          path: lambda-test
  presigned-url-generator:
    handler: src/handlers/presigned-url-generator/handler.main
    events:
      - http:
          method: get
          path: presigned-url-generator
  resizer:
    handler: src/handlers/resizer/handler.main
    memorySize: 2048
    timeout: 30
    events:
      - s3:
          bucket: !Ref S3Bucket
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: original/
    environment:
      MAX_FILE_SIZE: 11000000


# --------------------------------------------RESOURCES-----------------------------------------------------
resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: thumbnail-api-service-bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerEnforced
        Tags:
          - Key: Name
            Value: Thumbnail Api Service Bucket
    # S3BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: !Ref S3Bucket # Reference the bucket name
    #     PolicyDocument: # Define the policy document
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal: "*"
    #           Action: "s3:PutObject"
    #           Resource:
    #             - !Sub "arn:aws:s3:::${S3Bucket}/*.jpg"
    #             - !Sub "arn:aws:s3:::${S3Bucket}/*.jpeg" # Allow jpeg files
    #             - !Sub "arn:aws:s3:::${S3Bucket}/*.png" # Allow png files
    #         - Effect: Deny
    #           Principal: "*"
    #           Action: "s3:PutObject"
    #           Resource:
    #             - !Sub "arn:aws:s3:::${S3Bucket}/*" # Deny other types
    #           Condition:
    #             StringNotLike:
    #               s3:x-amz-content-sha256:
    #                 - "*.jpg"
    #                 - "*.jpeg"
    #                 - "*.png"


# --------------------------------------CUSTOM------------------------------------------------------------

custom:
  serverless-offline:
    httpPort: 3000
    payload:
      maxBytes: 30000000

package:
  individually: true
  include: 
    - src/**
    - .env
  exclude:
    - node_modules/**

